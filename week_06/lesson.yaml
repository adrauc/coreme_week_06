- Class: meta
  Course: coreme week 06
  Lesson: week 06
  Author: Adrian Rauchfleisch (borrowed parts from Thomas Leeper and Weiai Wayne Xu)
  Type: Standard
  Organization: National Taiwan University
  Version: 2.4.3

- Class: text
  Output: Dear Taida students, welcome to my R and RStudio introduction course. Whenever you see three points below (e.g. `...`) then press the Enter-key to continue the lesson. Now press the Enter-key to continue.

- Class: text
  Output: In this lesson, we`ll cover different sampling strategies in R.

- Class: text
  Output: Simple random sampling is the easiest design-based strategy for ensuring that your sample data are representative of the population from which those observations are drawn.

- Class: text
  Output: We can attempt to construct a representative sample either by

- Class: text
  Output: (a) Using “random sampling” methods to select cases from a population such that our sample will tend on average or in expectation to match the population’s characteristics.

- Class: text
  Output: (b) Identifying a set of features (variables) that distinguish cases from one another and selecting cases that vary according to the population distribution of those characteristics.

- Class: text
  Output: We are going to examine a population dataset containing the names of all babies born in the United States. This dataset contains the name and sex of every baby in the entire population of US babies born since approximately 1936. The dataset is available as an R package babynames.
  
- Class: cmd_question
  Output: Check the data frame babynames with the str function.
  CorrectAnswer: str(babynames)
  AnswerTests: omnitest(correctExpr='str(babynames)')
  Hint: Use babynames as argument in str()

- Class: text
  Output: what is the unit of analysis of the dataset? How many rows are there in the dataset? How many variables? You should note that this is dataset is actually an aggregation of the population data - each row is a year–name–sex observation (so the unit of analysis is a name used in a given year for a baby of a given sex).
  
- Class: text
  Output: Some names are used for male and female babies. Let's check this with the name Skylar. 
  
- Class: cmd_question
  Output: First try the column name == "Skylar". Use the $ to get the column name.
  CorrectAnswer: babynames$name == "Skylar"
  AnswerTests: omnitest(correctExpr='babynames$name == "Skylar"')
  Hint: Type babynames$name == "Skylar" 
    
- Class: text
  Output: We get a logical vector TRUE if the name is Skylar and FALSE if the name is not Skylar. 

  
- Class: cmd_question
  Output: Subset all rows for which the column name is "Skylar". We use as subset in the box brackets [] for the rows babynames$name == "Skylar"
  CorrectAnswer: babynames[babynames$name == "Skylar", ]
  AnswerTests: omnitest(correctExpr='babynames[babynames$name == "Skylar", ]')
  Hint: Type babynames[babynames$name == "Skylar", ].
  
- Class: text
  Output: As you can see the name is used for female and male babies.
  
- Class: text
  Output: Let's check only the year 2013.
  
- Class: cmd_question
  Output: Use the same subset as before - just add & babynames$year == 2013. The & means logical AND. Both conditions have to be TRUE.
  CorrectAnswer: babynames[babynames$name == "Skylar" & babynames$year == 2013, ]
  AnswerTests: omnitest(correctExpr='babynames[babynames$name == "Skylar" & babynames$year == 2013, ]')
  Hint: Type babynames[babynames$name == "Skylar" & babynames$year == 2013, ].  
  
- Class: cmd_question
  Output: Let's just use babynames$year == 2013 as subset and then we extract the name column. Add for the column in the [] "name".
  CorrectAnswer: babynames[babynames$year == 2013,"name"]
  AnswerTests: omnitest(correctExpr='babynames[babynames$year == 2013,"name"]')
  Hint: Type babynames[babynames$year == 2013,"name"].    
  
- Class: cmd_question
  Output: Use the same code again but save it now in a new object called name_2013
  CorrectAnswer: name_2013 <- babynames[babynames$year == 2013,"name"]
  AnswerTests: omnitest(correctExpr='name_2013 <- babynames[babynames$year == 2013,"name"]')
  Hint: Type name_2013 <- babynames[babynames$year == 2013,"name"].    
    
- Class: cmd_question
  Output: Try to use this vector name_2013 now with duplicated and sum. duplicated gives us TRUE if a name appears twice and sum counts the TRUE.
  CorrectAnswer: sum(duplicated(name_2013))
  AnswerTests: omnitest(correctExpr='sum(duplicated(name_2013))')
  Hint: Type use name_2013 as argument inside of duplicated(). The use this whole expression as argument in sum().  
  
- Class: text
  Output: There are 2435 names in 2013 that were used for both female and male babies. Let's check how it changed over time.
  
- Class: cmd_question
  Output: First we subset the row with Skylar as name - skylar <- babynames[babynames$name == "Skylar", ]
  CorrectAnswer: skylar <- babynames[babynames$name == "Skylar", ]
  AnswerTests: omnitest(correctExpr='skylar <- babynames[babynames$name == "Skylar", ]')
  Hint: Type skylar <- babynames[babynames$name == "Skylar", ]  
  
- Class: cmd_question
  Output: Now create the plot - ggplot(skylar, aes(x = year, y = n)) + geom_line(aes(colour = sex))
  CorrectAnswer: ggplot(skylar, aes(x = year, y = n)) + geom_line(aes(colour = sex))
  AnswerTests: omnitest(correctExpr='ggplot(skylar, aes(x = year, y = n)) + geom_line(aes(colour = sex))')
  Hint: Type ggplot(skylar, aes(x = year, y = n)) + geom_line(aes(colour = sex))

- Class: text
  Output: Only starting in the 90ies the name became more popular as a female name.

- Class: text
  Output: Now, because the dataset is an aggregation, it isn’t exactly in the form we need. We need to disaggregate the data to create a dataset where the unit of analysis is an individual person (rather than a year–name–sex aggregation).

- Class: text
  Output: I have already prepared the data set for you as there is the danger of crashing your computer. I have only selected baby names from 2014 (3,696,301 babies)

- Class: cmd_question
  Output: Check with table the sex of the babies in the data frame babynames_2014.
  CorrectAnswer: table(babynames_2014$sex)
  AnswerTests: omnitest(correctExpr='table(babynames_2014$sex)')
  Hint: Type table(babynames_2014$sex)

- Class: text
  Output: In practice, we very rarely have the ability to study every case in an entire population. Because of time limitations or other resources, we only investigate a smaller number of individuals. Imagine, for example, if we wanted to study the U.S. population of babies born in a given year, it would be time consuming to contact the families of all 3.7 million of them.
  
- Class: text
  Output: If we want to make claims about that entire population, we need to be careful about how we choose which subset to study. We cannot simply take an arbitrary subsample and expect it to be representative of the population.
    
- Class: text
  Output: Instead, social scientists typically use random sampling to select cases from a population. Such random sampling has nice properties, among them (1) the sample will tend to be representative of the population as a whole and (2) it requires relatively small numbers of cases to make very precise claims about unknown or unobserved features of the population based on the information provided by the sample.

- Class: cmd_question
  Output:   To showcase this, let’s draw a very small sample from this population using the sample() function. Start by drawing a small sample of just ten babies from the 2014. First check how the sample function works with ?sample (we want the sample function in base).
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Type ?sample

- Class: cmd_question
  Output:   Now we use sample with 1:nrow(babynames_2014$sex) and 10 as arguments and save it in s1
  CorrectAnswer: s1 <- sample(1:nrow(babynames_2014), 10)
  AnswerTests: omnitest(correctExpr='s1 <- sample(1:nrow(babynames_2014), 10)')
  Hint: Type s1 <- sample(1:nrow(babynames_2014), 10)
  
- Class: cmd_question
  Output:   s1 includes 10 random numbers that we now use to subset the rows. Use s1 inside of [] to subset the rows and save them in s1_df
  CorrectAnswer: s1_df <- babynames_2014[s1, ]
  AnswerTests: omnitest(correctExpr='s1_df <- babynames_2014[s1, ]')
  Hint: Type s1_df <- babynames_2014[s1, ] 
  
- Class: cmd_question
  Output:   Let's visualize the answer. Type ggplot(s1_df, aes(x = sex)) + geom_bar()
  CorrectAnswer: ggplot(s1_df, aes(x = sex)) + geom_bar()
  AnswerTests: omnitest(correctExpr='ggplot(s1_df, aes(x = sex)) + geom_bar()')
  Hint: Type ggplot(s1_df, aes(x = sex)) + geom_bar()
  
- Class: text
  Output: Probably you've got a not so good estimate for p.
  
- Class: cmd_question
  Output:  I have randomly drawn 15 times 10 babies from the population. Just type x
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x
  
- Class: text
  Output: As you can see there is a lot of variation in these samples. Clearly the “point estimate” from each sample, ˆp is not a very good estimate of the true population proportion, p. But we know this and consequently, scientists who use random sampling are more interested in what are called “interval estimates” that express a range of plausible values of the population parameter, p given the estimate p-hat that we obtained from our sample.
  
- Class: text
  Output: (a) The sample size that have drawn from the population (n), (b) The sampling procedure (in this case, simple random sampling), (c) The variance (Var(Y)) of the population variable (Y) we are interested in
   
- Class: text
  Output: We typically summarize our uncertainty about the value of the population parameter, p by a quantity called the “standard error” (SE). The SE expresses how much our sample estimates, ˆp vary across samples (were we to repeatedly sample from the population). The standard error is meant to capture the idea that if we repeated our sampling process and calculated our statistic of interest (in this case, the proportion of males, p-hat) on each sample, the standard deviation of those estimates around the true proportion, p would be the SE
 
- Class: text
  Output: The SE can then be used to construct a “margin of error” that conveys the interval in which we think the population parameter (the true proportion of males) is likely to be given the sample estimate and how much uncertainty we have due to “sampling error” (i.e., the fact that we are not observing the whole population).
  
- Class: text
  Output: To get a better grasp on this idea, we are going to draw numerous random samples from our population and then calculate the standard deviation of those estimated proportions, p-hat from each sample. The standard deviation of our estimates from repeated sampling is the standard error, SE(p-hat). Let’s repeat our random sampling of 10 babies and calculate the proportion for each sample. We will repeat this sampling procedure 1000 times to produce a vector of 1000 estimated values of p (one estimate per sample of n = 10).
  
- Class: text
  Output: The est vector contains each of those 1000 estimated values of p. In statistics, were we to repeat this exercise an infinite number of times, the est vector of estimates is what would be called the “sampling distribution” of the estimate. This term refers to the distribution of a given statistic across repeated samples of the same size from a population.

- Class: cmd_question
  Output:  I have created the est vector with the male proportion with 1000 samples. Type ggplot(, aes(x = est)) + geom_histogram(binwidth = 0.05)
  CorrectAnswer: ggplot(, aes(x = est)) + geom_histogram(binwidth = 0.05)
  AnswerTests: omnitest(correctExpr='ggplot(, aes(x = est)) + geom_histogram(binwidth = 0.05)')
  Hint: Type ggplot(, aes(x = est)) + geom_histogram(binwidth = 0.05)  
  
- Class: cmd_question
  Output:  Calculate the se with sd(). Use est as argument.
  CorrectAnswer: sd(est)
  AnswerTests: omnitest(correctExpr='sd(est)')
  Hint: Type sd(est)
  
- Class: cmd_question
  Output: I have drawn a larger sample size (20) 1000 times. Check the result with sd(est_20)
  CorrectAnswer: sd(est_20)
  AnswerTests: omnitest(correctExpr='sd(est_20)')
  Hint: Type sd(est_20)  
  
- Class: text
  Output: If we change the sample size, the SE will change. Larger samples produce smaller sds (to the point that if we sample all units in the population, the SE is 0). 
  
- Class: cmd_question
  Output: As a last example I have drawn 1000 times 1000 samples (saved in est_1000). Again, check the sd.
  CorrectAnswer: sd(est_1000)
  AnswerTests: omnitest(correctExpr='sd(est_1000)')
  Hint: Type sd(est_1000)  
  
- Class: text
  Output: Now the sd is extremly small.
    
- Class: text
  Output: When we have access to population data we can calculate the SE without ever drawing any samples because the SE is simply a function of the variance of the population. 
  
- Class: cmd_question
  Output: The variance is .25. we now have to calculate the sqrt(.25/n). We can calculate now the se for 1000. 
  CorrectAnswer: sqrt(.25/1000)
  AnswerTests: omnitest(correctExpr='sqrt(.25/1000)')
  Hint: Type sqrt(.25/1000)
  
- Class: cmd_question
  Output: The resulting number should closely correspond to the “true” SE that we calculated earlier using the standard deviation of the sample estimates.
  CorrectAnswer: sqrt(.25/1000)
  AnswerTests: omnitest(correctExpr='sqrt(.25/1000)')
  Hint: Type sqrt(.25/1000)
 
- Class: text
  Output: In practice, we do not typically draw multiple samples so we do not actually know how much our estimates would vary, nor do we observe the population data so we do not know what sd(Y) is. Statisticians get around this by using the sample data to estimate sd(Y)-hat using the “sample standard deviation” 
   
- Class: text
  Output: In particular, we often report what is known as the “margin of error” or “confidence interval” for the population parameter. This conveys a range of possible values where we would expect the population parameter to be, centered around our estimated value p-hat. For a typical margin of error, we simply double (more precisely 1.96) the standard error and add and subtract that value to p-hat to create an interval within which we estimate p to be (i.e., p-hat + / − SE(p))
 
- Class: cmd_question
  Output: Let's test this with the first s1_df with only 10 samples. Caclulate the sd with sd(s1_df$sex == "M") and save it in sd_m
  CorrectAnswer: sd_m <- sd(s1_df$sex == "M")
  AnswerTests: omnitest(correctExpr='sd_m <- sd(s1_df$sex == "M")')
  Hint: Type sd_m <- sd(s1_df$sex == "M")

- Class: cmd_question
  Output: n is 10 as we only sampled 10 babies. We no get the se with sd_m/sqrt(10). Save the value in se_m.
  CorrectAnswer: se_m <- sd_m/sqrt(10)
  AnswerTests: omnitest(correctExpr='se_m <- sd_m/sqrt(10)')
  Hint: Type se_m <- sd_m/sqrt(10)
  
- Class: cmd_question
  Output: Now y-hat with mean(s1_df$sex == "M") and save it in mean_m
  CorrectAnswer: mean_m <- mean(s1_df$sex == "M")
  AnswerTests: omnitest(correctExpr='mean_m <- mean(s1_df$sex == "M")')
  Hint: Type mean_m <- mean(s1_df$sex == "M")

- Class: cmd_question
  Output: Now we multiply se_m by 1.96 and save it in ci_sample. Type ci_sample <- se_m * 1.96
  CorrectAnswer: ci_sample <- se_m * 1.96
  AnswerTests: omnitest(correctExpr='ci_sample <- se_m * 1.96')
  Hint: Type ci_sample <- se_m * 1.96

- Class: cmd_question
  Output: Now we can say there is a 95% probability that the true value (population y) lies between... type mean_m - ci_sample
  CorrectAnswer: mean_m - ci_sample
  AnswerTests: omnitest(correctExpr='mean_m - ci_sample')
  Hint: Type mean_m - ci_sample

- Class: cmd_question
  Output: and... type mean_m + ci_sample
  CorrectAnswer: mean_m + ci_sample
  AnswerTests: omnitest(correctExpr='mean_m + ci_sample')
  Hint: Type mean_m + ci_sample
  
- Class: text
  Output: Not really precise with 10 but also not too bad
   
- Class: text
  Output: If we increase our n - the standard error will become smaller.
  
- Class: mult_question
  Output: Thank you for finishing this class. Press Enter and then please copy the completion code that will appear in the console after this question into the google form I created (check your email). Would you like to get the completion code? Type the number next to Yes and press Enter - then you need to Enter your student id and name.
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: get_token()
  Hint: NULL

- Class: text
  Output: Good job - that's it for this week!
  
